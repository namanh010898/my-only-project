@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@{
    ViewData["Title"] = "Sự kiện";
    Layout = "_Layout - Admin";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Latest compiled and minified JS -->
    @*<script src="https://code.jquery.com/jquery-3.5.1.js"></script>*@
 
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.ckeditor.com/ckeditor5/33.0.0/classic/ckeditor.js"></script>
    <title>Document</title>

    <script>
        $(document).ready(function () {
            $('#example').DataTable();
        });
    </script>
    <style>
        .modal-footer .btn + .btn {
            margin-bottom: 10px;
        }
    </style>

</head>

<body>
    <button onclick="window.location.href='/post/add/post'" style="width:100px;height:40px;background-color:lightgreen;border-color:white;float:right;margin-bottom:1%;">Add</button>
    <table id="example" class="display" style="width:100%;">
        <thead>
            <tr>
                <th>Tên</th>
                <th>Mô tả</th>
                <th>Tác giả</th>
                <th>Chi tiết</th>
                <th>Xóa</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < ViewBag.PostCount; i++)
            {
                <tr>
                    <td>@ViewBag.Posts[i].Name</td>
                    <td>@ViewBag.Posts[i].Description</td>
                    <td>@ViewBag.Posts[i].PostAccountId</td>
                    <td><button onclick="Edit(@ViewBag.Posts[i].Id)" data-toggle="modal" data-target="#modal-id">Sửa</button></td>
                    <td><button onclick="DeleteItem(@ViewBag.Posts[i].Id)">Xóa</button></td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th>Tên</th>
                <th>Mô tả</th>
                <th>Tác giả</th>
                <th>Chi tiết</th>
                <th>Xóa</th>
            </tr>
        </tfoot>
    </table>
    <div class="modal fade" id="modal-id">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-gradient-info">
                </div>
                <div class="modal-body">
                    <div>
                        <span>
                            <label for="id">ID</label><span style="color:red">*</span>
                            <input type="text" id="id" readonly />
                        </span>
                        <span>
                            <label for="posttypeid">Post Type</label><span style="color:red">*</span>
                            <select id="posttypeid">
                            </select>
                        </span>
                    </div>
                    <div>
                        <label for="postcategoryid">Post Category</label>
                        <div>
                            <select id="postcategoryid">
                            </select>
                        </div>
                    </div>
                    <label for="postaccountid">Author</label><span style="color:red">*</span>
                    <div><input type="text" id="postaccountid" readonly /></div>
                    <label for="postlayoutid">Post Layout</label><span style="color:red">*</span>
                    <div>
                        <select id="postlayoutid">
                        </select>
                    </div>
                    <label for="">Post Publish</label><span style="color:red">*</span>
                    <div>
                        <select id="postpublishid">
                            <option value="1">Public</option>
                            <option value="0">Private</option>
                        </select>
                    </div>
                    <label for="">Post Comment</label><span style="color:red">*</span>
                    <div>
                        <select id="postcommentstatusid">
                            <option value="1">Public</option>
                            <option value="0">Private</option>
                        </select>
                    </div>
                    <label for="">Url</label>
                    <div><input type="text" id="url" readonly /></div>
                    <label for="Photo">Photo</label>
                    <div><input type="text" id="photo" /></div>
                    <label for="Video">Video</label>
                    <div><input type="text" id="video" /></div>
                    <label for="Name">Name</label>
                    <div><input type="text" id="name" /></div>
                    <label for="description">Description</label>
                    <div><textarea id="description"></textarea></div>
                    <label for="">Content</label>
                    <div id="editor" class="Text"></div>
                    <label for="">Published Time</label>
                    <div><input type="datetime-local" id="publishtime" /></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default"
                            data-dismiss="modal">
                        Close
                    </button>
                    <button type="button" class="btn btn-primary" id="btnUpdateItem" onclick="Submit()">
                        Save
                        changes
                    </button>
                </div>
            </div>
        </div>
    </div>
</body>

</html>
<script>
    var posttext;
    ClassicEditor
        .create(document.querySelector('#editor'))
        .then(editor => {
            posttext = editor
        })
        .catch(error => {
            console.error(error);
        });


    function LoadDataPostType() {
        $.ajax({
            url: "https://localhost:5001/posttype/api/list",
            type: "GET",
            async: 'true',
            contentType: "application/json",
            success: function (responseData) {
                postLayoutData = JSON.parse(responseData);
                $.each(postLayoutData, function (index, item) {
                    var data = {
                        id: item.Id,
                        text: item.Name
                    };
                    var newOption = new Option(data.text, data.id, false, false);
                    $("#posttypeid").append(newOption).trigger('change');
                });
            },
            error: function (e) {

            }
        });
    }
    function LoadDataPostLayout() {
        $.ajax({
            url: "https://localhost:5001/postlayout/api/list",
            type: "GET",
            async: 'true',
            contentType: "application/json",
            success: function (responseData) {
                postLayoutData = JSON.parse(responseData);
                $.each(postLayoutData, function (index, item) {
                    var data = {
                        id: item.Id,
                        text: item.Name
                    };
                    var newOption = new Option(data.text, data.id, false, false);
                    $("#postlayoutid").append(newOption).trigger('change');
                });
            },
            error: function (e) {

            }
        });
    }
    function LoadDataPostCategory() {
        $.ajax({
            url: "https://localhost:5001/postcategory/api/list",
            type: "GET",
            async: 'true',
            contentType: 'application/json',
            success: function (responseData) {
                postcategorydata = JSON.parse(responseData);
                $.each(postcategorydata, function (index, item) {
                    var data = {
                        id: item.Id,
                        text: item.Name
                    };
                    var newOption = new Option(data.text, data.id, false, false);
                    $("#postcategoryid").append(newOption).trigger('change');
                });
            }
        })
    }
    
    function Submit() {
        Swal.fire({
            type: 'question',
            title: 'Confirm?',
            text: 'Do you want to edit this post ?',
            showCloseButton: true,
            showCancelButton: true
        }).then((result) => {
            if (result.isConfirmed) {
                var data = posttext.getData();
                var obj = {
                    "ID": $("#id").val(),
                    "PostTypeID": $("#posttypeid").val(),
                    "PostAccountID": 10001,
                    "PostLayoutID": $("#postlayoutid").val(),
                    "PostPublishStatusID": $("#postpublishid").val(),
                    "PostCommentStatusID": $("#postcommentstatusid").val(),
                    "Active": 1,
                    "Url": $("#url").val(),
                    "Photo": $("#photo").val(),
                    "Video": $("#video").val(),
                    "Name": $("#name").val(),
                    "Description": $("#description").val(),
                    "Text": data,
                    "PublishedTime": $("#publishtime").val()
                }
                $.ajax({
                    url: "https://localhost:5001/post/api/edit",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(obj),
                    success: function (responseData) {
                        Swal.fire({
                            type: 'confirm',
                            title: '<strong>Đã chỉnh sửa bài viết!</strong>',
                            showCloseButton: true,
                            focusConfirm: false,
                        });
                        location.reload();
                    }
                })
            } else if (result.isDenied) {

            }
        })
    }

    async function GetDetailItem(id) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: "https://localhost:5001/post/api/detail/" + id,
                type: "GET",
                async: 'true',
                contentType: "application/json",
                success: function (responseData) {
                    Item = JSON.parse(responseData);
                    resolve(Item)
                },
                error: function (e) {
                    reject(e);
                }
            });
        })
    }

    async function Edit(id) {
        $("#modal-id").show();
        $('#postcategoryid').find('option').remove().end();
        $('#posttypeid').find('option').remove().end();
        $('#postlayoutid').find('option').remove().end();
        LoadDataPostType();
        LoadDataPostLayout();
        LoadDataPostCategory();
        var obj = await GetDetailItem(id);
        $('#id').val(id);
        $('#postcategoryid option[value=' + obj[0].PostCategoryID + ']').attr('selected', 'selected');
        $('#posttypeid option[value=' + obj[0].PostTypeID + ']').attr('selected', 'selected');
        $('#postlayoutid option[value=' + obj[0].PostLayoutID + ']').attr('selected', 'selected');
        $('#postpublishid option[value=' + obj[0].PostPublishStatusID + ']').attr('selected', 'selected');
        $('#postcommentstatusid option[value=' + obj[0].PostCommentStatusID + ']').attr('selected', 'selected');
        posttext.setData(obj[0].Text);
        $("#name").val(obj[0].Name);
        if (obj[0].Photo != null) {
            $("#photo").val(obj[0].Photo);
        } else {

        }
        if (obj[0].Video != null) {
            $("#video").val(obj[0].Video);
        } else {

        }
        $("#url").val(obj[0].Url);
        $("#description").val(obj[0].Description);
        $("#publishtime").val(obj[0].PublishedTime);
    }

    async function DeleteItem(id) {
        Swal.fire({
            icon: 'question',
            title: 'Do you want to delete item',
            showCancelButton: true,
            showCloseButton: true
        }).then((result) => {
            if (result.isConfirmed) {
                var obj = await GetDetailItem(id);
                $.ajax({
                    url: "https://localhost:5001/post/api/delete",
                    type: 'POST',
                    contentType: 'application/JSON',
                    data: JSON.stringify({ "id": id }),
                    success: function (responseData) {
                        Swal.fire('Deleted!',
                            'Item ' + obj.name + ' has been deleted.',
                            'success');
                        location.reload();
                    }
                })
            }
        })
    }
</script>
